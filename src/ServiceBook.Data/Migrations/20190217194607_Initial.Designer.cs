// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServiceBook.Data;

namespace ServiceBook.Data.Migrations
{
    [DbContext(typeof(ServiceBookDbContext))]
    [Migration("20190217194607_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028");

            modelBuilder.Entity("ServiceBook.Models.DatabaseModels.ServiceIntervention", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("Description");

                    b.Property<int>("Mileage");

                    b.Property<DateTime>("NextServiceIntervalDate");

                    b.Property<string>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("ServiceInterventions");
                });

            modelBuilder.Entity("ServiceBook.Models.DatabaseModels.ServiceItem", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Part");

                    b.Property<decimal>("PricePerUnit");

                    b.Property<string>("ServiceInterventionId");

                    b.Property<double>("Units");

                    b.HasKey("Id");

                    b.HasIndex("ServiceInterventionId");

                    b.ToTable("ServiceItems");
                });

            modelBuilder.Entity("ServiceBook.Models.DatabaseModels.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("PhoneNumber");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ServiceBook.Models.DatabaseModels.Vehicle", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ExactModelName");

                    b.Property<string>("Make")
                        .IsRequired();

                    b.Property<string>("Model")
                        .IsRequired();

                    b.Property<string>("OwnerId")
                        .IsRequired();

                    b.Property<string>("RegistrationPlate")
                        .IsRequired();

                    b.Property<string>("VIN");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("ServiceBook.Models.DatabaseModels.ServiceIntervention", b =>
                {
                    b.HasOne("ServiceBook.Models.DatabaseModels.Vehicle", "Vehicle")
                        .WithMany("ServiceInterventions")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ServiceBook.Models.DatabaseModels.ServiceItem", b =>
                {
                    b.HasOne("ServiceBook.Models.DatabaseModels.ServiceIntervention", "ServiceIntervention")
                        .WithMany("ServiceItems")
                        .HasForeignKey("ServiceInterventionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ServiceBook.Models.DatabaseModels.Vehicle", b =>
                {
                    b.HasOne("ServiceBook.Models.DatabaseModels.User", "Owner")
                        .WithMany("Vehicles")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
